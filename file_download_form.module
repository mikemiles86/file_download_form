<?php
/**
 * @file
 * core functionality for file download form module
 */

/**
 * @TODOs for Drupal7
 * - integrate with cck filefield
 *    - display widget?
 * - support multiple files per entity
 * - allow admin to select node to redirect to for thankyou page
 * - allow admin to add fields to custom form (use entityform?)
 * - allow admin to be emailed when users download certian files
 * - improve obscuration of fle paths
 * - drupal standards
 * - support either sending user an email or direct redirect to file.
 */

/**
 * Implements hook_field_formatter_info_alter().
 */
function file_download_form_field_formatter_info_alter(&$info) {
  $info['file_download_form'] = array(
    'label'       => t('File Download Form'),
    'field types' => array('file'),
    'module'      => 'file_download_form',
    'settings'    => array(
      'form_type' => '',
      'form_settings' => '',
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function file_download_form_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display  = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element  = array();

  $element['form_type'] = array(
    '#type'   => 'radios',
    '#title'  => t('Form Type'),
    '#description'  => t('Select what type of form you would like to use as the file download form.'),
    '#options'  => array(
      'file_download_form' => t('File Download Form'),
    ),
    '#required' => TRUE,
  );

  if (isset($settings['form_type'])) {
    $element['form_type']['#default_value'] = $settings['form_type'];
  }

//@TODO: states is not working correctly.
  $element['file_download_form'] = array(
    '#type'   => 'fieldset',
    '#collapsible' => TRUE,
    '#title'  => t('File Download Form'),
    '#description' => $field_selector,
    '#states' => array(
      'visible' => array(
        ':input[name=form_type]' => array('value' => 'file_download_form'),
      ),
    ),
  );

  $element['file_download_form']['obscure_file'] = array(
    '#type'   => 'checkbox',
    '#title'  => t('Obscure File path'),
    '#description' => t('Obscure the file download path with a hashed url.'),
  );

  if (isset($settings['file_download_form']['obscure_file'])) {
    $element['file_download_form']['obscure_file']['#default_value'] = $settings['file_download_form']['obscure_file'];
  }

  $element['file_download_form']['email_file'] = array(
    '#type'   => 'checkbox',
    '#title'  => t('Email File'),
    '#description'  => t('Email the file path to the user after they have completed the form. Leave this unchecked to allow users to immediately download the file.'),
  );

  if (isset($settings['file_download_form']['email_file'])) {
    $element['file_download_form']['email_file']['#default_value'] = $settings['file_download_form']['email_file'];
  }

  return $element;
}

//@TODO: form settings are not saving.

/**
 * Implements hook_field_formatter_settings_summary().
 */
function file_download_form_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = '';


  if ($display['type'] == 'file_download_form') {
    $summary = t('Display a form that the user has to fill out to be able to download the file.');
  }

  return $summary;
}


/**
 * Implements hook_formatter_view().
 */
function file_download_form_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element      = array();
  $settings     = $display['settings'];

  if ($display['type'] == 'file_download_form') {
    foreach ($items as $delta => $item) {
      $element[$delta] = array('#markup' => l('Download File','http://www.google.com'));
    }
  }

  return $element;
}
